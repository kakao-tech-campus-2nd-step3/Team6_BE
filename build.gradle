plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'supernova'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // MySQL JDBC 드라이버 추가
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.11.5")

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // embedded redis - 테스트 시 적용
    testImplementation('it.ozimov:embedded-redis:0.7.3') {
        exclude group: 'org.slf4j', module: 'slf4j-simple' // SLF4J Simple 제외 (필요한 경우)
    }

    // aws - s3
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.1.1")
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'
}

tasks.named('test') {
    useJUnitPlatform()
}
